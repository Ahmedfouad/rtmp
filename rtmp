#!/bin/sh
help_entry(){
    #df -h
    echo -e "Usage: \n $(basename $0) <location> <size>"
    echo
    echo "[Caution]:size of /tmp in MB "
    echo -e "\tMin. size = 1000MB"
    echo -e "\tMax. size = 50000MB"
    exit 0
}
#create mounted /tmp if it isn't exist
create_new(){
    echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<Create NEW>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    dd if=/dev/zero of=$location/tmpDSK bs=1M count=$size &> /dev/null
    mkfs -t ext4 -F -j $location/tmpDSK &> /dev/null
    mount -o loop,rw,noexec,nosuid $location/tmpDSK /tmp
    mount -o bind,rw,noexec,nosuid /tmp /var/tmp
    chmod 1777 /tmp /var/tmp
    sed --in-place=.orig '/^.*\/tmp\s.*$/d' /etc/fstab
    mount -a
    echo "$location/tmpDSK      /tmp            ext4    defaults,loop,rw,noexec,nosuid 0 0" >> /etc/fstab
    echo "/tmp              /var/tmp    ext4    defaults,bind,rw,noexec,nosuid 0 0" >> /etc/fstab
    echo "Successfully create /tmp"
}
#modify the existing mounted /tmp
modify_existing(){
        echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<Modify Existing>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
        
        dd if=/dev/zero of=$location/tmpDSK bs=1M count=$size &> /dev/null
        mkfs -t ext4 -F -j $location/tmpDSK &> /dev/null
        count=0
        tmp_services[0]=""
        for i in `lsof /tmp |grep -v COMMAND |awk '{print$1}' |sort |uniq`
        do
            if pidof $i &> /dev/null
            then
                tmp_services[$count]=$i
            fi
            count=$(expr $c + 1)
        done
        for i in ${tmp_services[@]}
        do
            service $i stop
        done
        for i in $(ps aux | grep tailwatchd |grep -v grep | awk '{print$2}');do kill -9 ${i};done
        if umount -l /tmp &>/dev/null
        then
            umount -l /var/tmp &>/dev/null
            echo "/tmp unmounted successfully, performing expansion operations now."
            if mount -o loop,rw,noexec,nosuid $location/tmpDSK /tmp
            then
                mount -o bind,rw,noexec,nosuid /tmp /var/tmp
                chmod 1777 /tmp /var/tmp
                if [ "$(ls -l $old_tmp_space | cut -c-1)" = "-" ] && file $old_tmp_space |grep ext &> /dev/null
                then
                    rm $old_tmp_space
                fi
                sed --in-place=.orig '/^.*\/tmp\s.*$/d' /etc/fstab
                echo "$location/tmpDSK             /tmp            ext4    defaults,loop,rw,noexec,nosuid 0 0" >> /etc/fstab
                echo "/tmp                    /var/tmp        ext4    defaults,bind,rw,noexec,nosuid 0 0" >> /etc/fstab
            else
                echo "Can not mount /tmp with new location. Please try re-running the script"
                for i in ${tmp_services[@]}
                do
                    service $i start
                done
                mount -a
                exit 2
            fi
            # Start the services we stopped earlier
            for i in ${tmp_services[@]}
            do
                service $i start
            done
            echo
            echo "SUCCESSFULLY RESIZING /tmp"
        else
            echo "Can not umount /tmp. Please examine the output of \`lsof|grep /tmp\` to find which processes are still using /tmp."
            for i in ${tmp_services[@]}
            do
                service $i start
            done
            mount -a
            exit 2
        fi
}
if [ $(id -u) != "0" ]
then
    echo "Sorry:you must be the root to run this script"
    help_entry
    exit 1
fi

if [ -z "$1" ] || [ -z "$2" ]
then
    echo -e "\nPlease Enter BOTH Location and Size"
    echo
    help_entry
    exit 1
else
    if [ -d "$1" ]
    then
        location=`echo $1 | grep -oE '\/\w+'`
        old_tmp_space=`df -h |grep tmp |grep -v tmpfs |awk '{print$1}'`
        if echo $old_tmp_space |grep $location &> /dev/null
        then
            echo 
            echo "[Exit] : Please choose another Dir (/tmp is already exists on $location)"
            echo
            exit 2
        fi
        selected_location_free_space=`df -m ${location} | grep -v Filesystem | awk '{print$4}'`
        if [ $2 -ge 1000 ] && [ $2 -le 50000 ]
        then
            size=$2
            if [ $selected_location_free_space -gt $size ]
            then
                echo ""
                echo "###########################################"
                echo "#              RESIZING /tmp              #"
                echo "#      <<with a specific location>>       #"
                echo "#                                         #"  
                echo "#        mount to a specified size        #" 
                echo "#            (Max. size 50 GB)            #"
                echo "#                                         #"
                echo "#    BROUGHT TO YOU BY ArabHosters.com    #"
                echo "#         http://ArabHosters.com          #"  
                echo "###########################################"
                echo
                if df -h |grep /tmp |grep -v tmpfs &> /dev/null
                then
                    echo "/tmp new status is :"
                    echo
                    echo -e "Location" '\t' '\t' "Size"
                    echo -e "--------" '\t' '\t' "----"
                    echo -e "$location/tmp" '\t' '\t' "$size MB"
                    echo
                    
                    modify_existing
                else 
                    echo "/tmp new status is :"
                    echo
                    echo -e "Location" '\t' '\t' "Size"
                    echo -e "--------" '\t' '\t' "----"
                    echo -e "$location/tmp" '\t' '\t' "$size MB"
                    echo
                    create_new
                fi
            else
                echo "[error] : $location does not contain required free space (Available Space is $selected_location_free_space M)"
                echo
                help_entry
                exit 1
            fi 
        else
            echo "[error] : Available size is between 1000:10000 mega bytes"
            echo
            help_entry  
            exit 1
        fi
    else
        echo "[error] : Please Enter a valid location"
        echo
        help_entry
        exit 1
    fi
fi
